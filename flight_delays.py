# -*- coding: utf-8 -*-
"""flight_delays.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0SS0DxKUYxMPuKH79g3493FtIPdPEEG
"""

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import style
style.use("ggplot")
from sklearn.cluster import KMeans
import pandas as pd
df = pd.read_csv("FlightDelays.csv")
plt.figure(1)
sns.countplot( x= 'Flight Status', data= df)
plt.figure(2)
sns.countplot( x= 'Flight Status', hue= 'DEST', data= df)
plt.figure(3)
sns.countplot( x= 'Flight Status', hue = 'DAY_WEEK',data= df)
plt.figure(4)
sns.countplot( x= 'Flight Status', hue = 'CARRIER',data= df)
plt.figure(5)
sns.countplot( x= 'Flight Status', hue = 'DAY_OF_MONTH', data= df)
plt.figure(6)
sns.countplot( x= 'Flight Status',hue = 'ORIGIN', data= df)
plt.figure(7)
sns.countplot( x= 'Flight Status',hue = 'DISTANCE', data= df)

df.info()
df.isnull().sum()
sns.heatmap(df.isnull(), yticklabels=False, cbar=False)

import pandas as pd
import math
import numpy as np
import seaborn as sns

df = pd.read_csv("FlightDelays.csv")
print(df)

x = df['CRS_DEP_TIME']
y = list(x) 
s = range(0,len(y))
for i in s:
  y[i] = math.floor(y[i] / 100)
df['CRS_DEP_TIME'] = y
sns.countplot(y)
print(df)

import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
style.use("ggplot")
from sklearn.cluster import KMeans
from sklearn.metrics import confusion_matrix
import pandas as pd
df = pd.read_csv("FlightDelays.csv")
#print(df)
x = df['CRS_DEP_TIME']
y = list(x) 
s = range(0,len(y))
for i in s:
  y[i] = math.floor(y[i] / 100)
df['CRS_DEP_TIME'] = y

df['Flight Status'] = df['Flight Status'].apply(lambda x:1 if x == 'delayed' else 0)
df = pd.concat([df,pd.get_dummies(df['Weather'],drop_first=True,prefix="Weather")],axis=1)
df = pd.concat([df,pd.get_dummies(df['CRS_DEP_TIME'],drop_first=True,prefix="CRS_DEP_TIME")],axis=1)
df = pd.concat([df,pd.get_dummies(df['DAY_OF_MONTH'],drop_first=True,prefix="DAY_OF_MONTH")],axis=1)
df = pd.concat([df,pd.get_dummies(df['CARRIER'],drop_first=True,prefix="CARRIER")],axis=1)
df = pd.concat([df,pd.get_dummies(df['DISTANCE'],drop_first=True,prefix="DISTANCE")],axis=1)
df = pd.concat([df,pd.get_dummies(df['DAY_WEEK'],drop_first=True,prefix="DAY_WEEK")],axis=1)
#df = pd.concat([df,pd.get_dummies(df['ORIGIN'],drop_first=True,prefix="ORIGIN")],axis=1)
#df = pd.concat([df,pd.get_dummies(df['DEST'],drop_first=True,prefix="DEST")],axis=1)

df.drop(['Weather','DISTANCE','DAY_WEEK','CARRIER','ORIGIN','CRS_DEP_TIME','DAY_OF_MONTH', 'DEST','DEP_TIME', 'TAIL_NUM','FL_DATE', 'FL_NUM'],axis=1,inplace=True)
print(df) 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df.drop(['Flight Status'], axis=1),df['Flight Status'], test_size=0.40)

from sklearn.linear_model import LogisticRegression
#Train the model
logmodel = LogisticRegression(max_iter = 20000)
logmodel.fit(X_train,y_train)
print('logreg')

#Predicting on the Test Set
predictions = logmodel.predict(X_test)

from sklearn.metrics import classification_report
print(classification_report(y_test, predictions))
print(confusion_matrix(y_test, predictions))
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)
y_pred_tree = clf.predict(X_test)
print('Decision Tree')
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred_tree))
print(confusion_matrix(y_test, y_pred_tree))